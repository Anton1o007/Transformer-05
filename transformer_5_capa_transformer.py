{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:08:39.87938Z\",\"iopub.execute_input\":\"2022-06-27T15:08:39.880301Z\",\"iopub.status.idle\":\"2022-06-27T15:08:49.384328Z\",\"shell.execute_reply.started\":\"2022-06-27T15:08:39.880185Z\",\"shell.execute_reply\":\"2022-06-27T15:08:49.383385Z\"}}\n!pip -q install vit_pytorch linformer\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:08:53.212328Z\",\"iopub.execute_input\":\"2022-06-27T15:08:53.213189Z\",\"iopub.status.idle\":\"2022-06-27T15:08:54.162376Z\",\"shell.execute_reply.started\":\"2022-06-27T15:08:53.213132Z\",\"shell.execute_reply\":\"2022-06-27T15:08:54.161464Z\"}}\nfrom __future__ import print_function\n\nimport glob\nfrom itertools import chain\nimport os\nimport random\nimport zipfile\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom linformer import Linformer\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom torch.optim.lr_scheduler import StepLR\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nfrom tqdm.notebook import tqdm\n\nfrom vit_pytorch.efficient import ViT\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:08:56.383994Z\",\"iopub.execute_input\":\"2022-06-27T15:08:56.384606Z\",\"iopub.status.idle\":\"2022-06-27T15:08:56.389005Z\",\"shell.execute_reply.started\":\"2022-06-27T15:08:56.384572Z\",\"shell.execute_reply\":\"2022-06-27T15:08:56.388211Z\"}}\n# Training settings\nbatch_size = 256\nepochs = 20\nlr = 0.0003\ngamma = 0.7\nseed = 42\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:08:58.436795Z\",\"iopub.execute_input\":\"2022-06-27T15:08:58.437183Z\",\"iopub.status.idle\":\"2022-06-27T15:08:58.441556Z\",\"shell.execute_reply.started\":\"2022-06-27T15:08:58.437135Z\",\"shell.execute_reply\":\"2022-06-27T15:08:58.440486Z\"}}\ndevice = 'cuda'\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:00.182701Z\",\"iopub.execute_input\":\"2022-06-27T15:09:00.183504Z\",\"iopub.status.idle\":\"2022-06-27T15:09:00.187053Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:00.183468Z\",\"shell.execute_reply\":\"2022-06-27T15:09:00.186227Z\"}}\ntrain_dir = '../input/iais22-birds/birds/birds'\ntest_dir = '../input/iais22-birds/submission_test'\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:03.147802Z\",\"iopub.execute_input\":\"2022-06-27T15:09:03.148154Z\",\"iopub.status.idle\":\"2022-06-27T15:09:03.156404Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:03.148125Z\",\"shell.execute_reply\":\"2022-06-27T15:09:03.155036Z\"}}\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything(seed)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:05.144641Z\",\"iopub.execute_input\":\"2022-06-27T15:09:05.145006Z\",\"iopub.status.idle\":\"2022-06-27T15:09:05.149459Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:05.144975Z\",\"shell.execute_reply\":\"2022-06-27T15:09:05.148544Z\"}}\ndef get_classes(data_dir):\n    all_data = datasets.ImageFolder(data_dir)\n    return all_data.classes\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:06.510984Z\",\"iopub.execute_input\":\"2022-06-27T15:09:06.511579Z\",\"iopub.status.idle\":\"2022-06-27T15:09:07.722616Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:06.511541Z\",\"shell.execute_reply\":\"2022-06-27T15:09:07.721789Z\"}}\ntrain_list = []\nclasses = get_classes(train_dir)\nfor c in classes:\n    train_list = train_list + (glob.glob(os.path.join(train_dir+\"/\"+c,'*.jpg')))\n    \nprint(f\"Train Data: {len(train_list)}\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:11.170926Z\",\"iopub.execute_input\":\"2022-06-27T15:09:11.171339Z\",\"iopub.status.idle\":\"2022-06-27T15:09:11.202894Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:11.171305Z\",\"shell.execute_reply\":\"2022-06-27T15:09:11.202168Z\"}}\nlabels = [path.split('/')[-2] for path in train_list]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:14.155559Z\",\"iopub.execute_input\":\"2022-06-27T15:09:14.155992Z\",\"iopub.status.idle\":\"2022-06-27T15:09:14.264891Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:14.155957Z\",\"shell.execute_reply\":\"2022-06-27T15:09:14.264084Z\"}}\ntrain_list, valid_list = train_test_split(train_list, \n                                          test_size=0.2,\n                                          stratify=labels,\n                                          random_state=seed)\n\nlabels2 = [path.split('/')[-2] for path in valid_list]\n\ntest_list, valid_list = train_test_split(valid_list, \n                                          test_size=0.5,\n                                          stratify=labels2,\n                                          random_state=seed)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:17.367027Z\",\"iopub.execute_input\":\"2022-06-27T15:09:17.367514Z\",\"iopub.status.idle\":\"2022-06-27T15:09:17.37411Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:17.367478Z\",\"shell.execute_reply\":\"2022-06-27T15:09:17.37256Z\"}}\nprint(f\"Train Data: {len(train_list)}\")\nprint(f\"Validation Data: {len(valid_list)}\")\nprint(f\"Test Data: {len(test_list)}\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:19.525794Z\",\"iopub.execute_input\":\"2022-06-27T15:09:19.526158Z\",\"iopub.status.idle\":\"2022-06-27T15:09:19.533464Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:19.526129Z\",\"shell.execute_reply\":\"2022-06-27T15:09:19.53235Z\"}}\ntrain_transforms = transforms.Compose(\n    [\n        transforms.Resize((224, 224)),\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n    ]\n)\n\nval_transforms = transforms.Compose(\n    [\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n    ]\n)\n\n\ntest_transforms = transforms.Compose(\n    [\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.ToTensor(),\n    ]\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:21.64682Z\",\"iopub.execute_input\":\"2022-06-27T15:09:21.647194Z\",\"iopub.status.idle\":\"2022-06-27T15:09:21.654059Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:21.647144Z\",\"shell.execute_reply\":\"2022-06-27T15:09:21.653321Z\"}}\nclass BirdsDataset(Dataset):\n    def __init__(self, file_list, transform=None):\n        self.file_list = file_list\n        self.transform = transform\n\n    def __len__(self):\n        self.filelength = len(self.file_list)\n        return self.filelength\n\n    def __getitem__(self, idx):\n        img_path = self.file_list[idx]\n        img = Image.open(img_path)\n        img_transformed = self.transform(img)\n\n        label = img_path.split(\"/\")[-2]\n        label = classes.index(label)\n\n        return img_transformed, label\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:23.622662Z\",\"iopub.execute_input\":\"2022-06-27T15:09:23.623025Z\",\"iopub.status.idle\":\"2022-06-27T15:09:23.627379Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:23.622995Z\",\"shell.execute_reply\":\"2022-06-27T15:09:23.626383Z\"}}\ntrain_data = BirdsDataset(train_list, transform=train_transforms)\nvalid_data = BirdsDataset(valid_list, transform=val_transforms)\ntest_data = BirdsDataset(test_list, transform=test_transforms)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:25.261737Z\",\"iopub.execute_input\":\"2022-06-27T15:09:25.262102Z\",\"iopub.status.idle\":\"2022-06-27T15:09:25.26778Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:25.262072Z\",\"shell.execute_reply\":\"2022-06-27T15:09:25.266947Z\"}}\ntrain_loader = DataLoader(dataset = train_data, batch_size=batch_size, shuffle=True, num_workers=2)\nvalid_loader = DataLoader(dataset = valid_data, batch_size=batch_size, shuffle=True, num_workers=2)\ntest_loader = DataLoader(dataset = test_data, batch_size=batch_size, shuffle=True, num_workers=2)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:27.369923Z\",\"iopub.execute_input\":\"2022-06-27T15:09:27.370336Z\",\"iopub.status.idle\":\"2022-06-27T15:09:27.375154Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:27.37029Z\",\"shell.execute_reply\":\"2022-06-27T15:09:27.374209Z\"}}\nprint(len(train_data), len(train_loader))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:29.609218Z\",\"iopub.execute_input\":\"2022-06-27T15:09:29.609967Z\",\"iopub.status.idle\":\"2022-06-27T15:09:29.614642Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:29.609933Z\",\"shell.execute_reply\":\"2022-06-27T15:09:29.61352Z\"}}\nprint(len(valid_data), len(valid_loader))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:31.617833Z\",\"iopub.execute_input\":\"2022-06-27T15:09:31.61821Z\",\"iopub.status.idle\":\"2022-06-27T15:09:31.70219Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:31.618158Z\",\"shell.execute_reply\":\"2022-06-27T15:09:31.701386Z\"}}\n#Esta funcion se ha importado\nefficient_transformer = Linformer(\n    dim=224,\n    seq_len=49+1,  # 7x7 patches + 1 cls-token\n    depth=12,\n    heads=8,\n    k=64\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:33.697327Z\",\"iopub.execute_input\":\"2022-06-27T15:09:33.697835Z\",\"iopub.status.idle\":\"2022-06-27T15:09:35.398287Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:33.697802Z\",\"shell.execute_reply\":\"2022-06-27T15:09:35.397363Z\"}}\nmodel = ViT(\n    dim=224,\n    image_size=224,\n    patch_size=32,\n    num_classes=400,\n    transformer=efficient_transformer,\n    channels=3,\n).to(device)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:37.240764Z\",\"iopub.execute_input\":\"2022-06-27T15:09:37.24113Z\",\"iopub.status.idle\":\"2022-06-27T15:09:37.247487Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:37.241099Z\",\"shell.execute_reply\":\"2022-06-27T15:09:37.246509Z\"}}\n# loss function\ncriterion = nn.CrossEntropyLoss()\n# optimizer\noptimizer = optim.Adam(model.parameters(), lr=lr)\n# scheduler\nscheduler = StepLR(optimizer, step_size=1, gamma=gamma)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T15:09:39.790955Z\",\"iopub.execute_input\":\"2022-06-27T15:09:39.791343Z\",\"iopub.status.idle\":\"2022-06-27T16:07:18.902028Z\",\"shell.execute_reply.started\":\"2022-06-27T15:09:39.79131Z\",\"shell.execute_reply\":\"2022-06-27T16:07:18.900895Z\"}}\nfor epoch in range(epochs):\n    epoch_loss = 0\n    epoch_accuracy = 0\n\n    for data, label in tqdm(train_loader):\n        data = data.to(device)\n        label = label.to(device)\n\n        output = model(data)\n        loss = criterion(output, label)\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        acc = (output.argmax(dim=1) == label).float().mean()\n        epoch_accuracy += acc / len(train_loader)\n        epoch_loss += loss / len(train_loader)\n\n    with torch.no_grad():\n        epoch_val_accuracy = 0\n        epoch_val_loss = 0\n        for data, label in valid_loader:\n            data = data.to(device)\n            label = label.to(device)\n\n            val_output = model(data)\n            val_loss = criterion(val_output, label)\n\n            acc = (val_output.argmax(dim=1) == label).float().mean()\n            epoch_val_accuracy += acc / len(valid_loader)\n            epoch_val_loss += val_loss / len(valid_loader)\n\n    print(\n        f\"Epoch : {epoch+1} - loss : {epoch_loss:.4f} - acc: {epoch_accuracy:.4f} - val_loss : {epoch_val_loss:.4f} - val_acc: {epoch_val_accuracy:.4f}\\n\"\n    )\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T17:03:46.311478Z\",\"iopub.execute_input\":\"2022-06-27T17:03:46.311843Z\",\"iopub.status.idle\":\"2022-06-27T17:03:46.32456Z\",\"shell.execute_reply.started\":\"2022-06-27T17:03:46.31181Z\",\"shell.execute_reply\":\"2022-06-27T17:03:46.323701Z\"}}\ndef test(model):\n  test_loss = 0.0\n  class_correct = list(0. for i in range(len(classes)))\n  class_total = list(0. for i in range(len(classes)))\n\n  model.eval()\n\n  for data, target in tqdm(test_loader):\n      if torch.cuda.is_available(): \n          data, target = data.cuda(), target.cuda()\n      with torch.no_grad():\n        output = model(data)\n        loss = criterion(output, target)\n      test_loss += loss.item()*data.size(0)\n      _, pred = torch.max(output, 1)    \n      correct_tensor = pred.eq(target.data.view_as(pred))\n      correct = np.squeeze(correct_tensor.numpy()) if not torch.cuda.is_available() else np.squeeze(correct_tensor.cpu().numpy())\n      if len(target) == 64:\n        for i in range(64):\n            label = target.data[i]\n            class_correct[label] += correct[i].item()\n            class_total[label] += 1\n\n  test_loss = test_loss/len(test_loader.dataset)\n  print('Test Loss: {:.6f}\\n'.format(test_loss))\n\n  for i in range(len(classes)):\n      if class_total[i] > 0:\n          print('Test Accuracy of %5s: %2d%% (%2d/%2d)' % (\n              classes[i], 100 * class_correct[i] / class_total[i],\n              np.sum(class_correct[i]), np.sum(class_total[i])))\n      else:\n          print('Test Accuracy of %5s: N/A (no training examples)' % (classes[i]))\n\n  print('\\nTest Accuracy (Overall): {:.4f} ({}/{})'.format(\n      100. * np.sum(class_correct) / np.sum(class_total),\n      np.sum(class_correct), np.sum(class_total)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-06-27T17:03:49.059998Z\",\"iopub.execute_input\":\"2022-06-27T17:03:49.060357Z\",\"iopub.status.idle\":\"2022-06-27T17:04:22.080188Z\",\"shell.execute_reply.started\":\"2022-06-27T17:03:49.060326Z\",\"shell.execute_reply\":\"2022-06-27T17:04:22.079053Z\"}}\ntest(model)\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n","metadata":{"_uuid":"76a59af4-5dc2-41e0-9888-ffee1b7c17b4","_cell_guid":"39c9d226-89b9-4a9d-9365-2a46bb04756c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}